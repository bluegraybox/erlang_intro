What's cool about Erlang
    Scalability, Performance
        nine 9s uptime
        1000s reqs/sec
        spawning, mananging processes, IPC baked in
        update code while running
    But what do I use it for
        how do I get started?
        You don't want to be building applications like that in a language you don't know
        I have trouble coming up with a project that needs all that
    Elegance
        concise & expressive
        part of what's cool about Erlang is what's cool about functional languages
        special features - invert conventional view: what makes it strange makes it beautiful

Procedural, OO, Functional
        programming styles
        most languages are mutts
    Procedural
        Sequence of actions
        Simple data structures
        How people think about the world: narrative, fairly linear
        functions are like anecdotes
        C is procedural; Perl is procedural with OO bolted on
    OO - Things that do things, have behaviors
        Focus on data structures & relations
        How people understand parts of the world in isolation
        functions are still anecdotes
    OO - Define relations between objects
        Risk of Ravioli Code - narrative is lost
        Ruby is OO with functional features
    Functional
        Mapping inputs to outputs
        Not a normal human way to look at the world
        more like doing proofs
        Rewire your brain: cool, not as hard as it sounds, "math revelation payoff"
        De Morgan's laws
    Why?
    Math vs. Play Doh
        procedural like rambing stories
        OO - lots of structure for the sake of structure; complexity begets complexity
            easy to write lot of code - "Wait, what was the question?"
        functional - focus: inputs & outputs
        ok, enough philosophizing

Reading Erlang in 2 min
    Where are my curly braces?
        "weird" = "doesn't look like C," unlike Pascal, Java, Javascript, Php, Perl, Python, Ruby
    comment
    atom - :atom in Ruby, Enum in Java
    Variable - Java final
    tuple - don't worry about it
    function - return atom
    assignment - this is not a... , it's a pattern match
    multi-assign
    list splitting (double tap)
Function Overloading, and why these features are cool
    Java - by parameter number
    Java - by type
    Erlang - by parameter number
    Erlang - by value
    Erlang - with guards!
        again, you're mapping inputs to outputs
        let you differentiate inputs, takes input matching a step further
        makes functions more declarative
    if - implicit elseif else
    case: not just switch - pattern match
    case - file open

Indent Parser
    Detour
        First looked at Erlang ~3 years ago: cool, but what do I do with it?
        GTD task list: store in markup, parse
    project tree
    task markup
    input lines
    output structure
    Ruby
        data structures: Parser, Lines, Trees, Nodes, Leaves
    tree walk 1-5
    command-line
        output leaf nodes with paths
    Hackers & Painters
        essays by Paul Graham of y-combinator, hacker news
        transliterate Ruby to Lisp
        this is basically a recursive problem
    Train wreck
        lost track of where I was in tree and where I was in input - mismatches
        felt very square peg/round hole
        What's Lisp-y? Recursion! How?
        recursion - when a function calls itself
        break the problem into self-similar pieces
        what does that look like?
    Java iteration
        simpler example
    Ruby iteration
    Ruby list comprehension
        map your list to a new list where each thing has had stuff done to it
        this is Ruby showing its Lisp influences
    Erlang recursion 1
    Erlang recursion 2
    Thinker
        back to the problem at hand
        think think think
    Depair
        give up, go to bed; a-ha!
    recursive 1
        at first node, break the rest of the data into Your Children and Not-
        I have children, and I'm the first of my siblings
        do this at each node
    recursive 2 & 3
        what does the code look like? hold on; we don't have time for me to teach you to read Lisp
    Erlang: A Kinder, Gentler Lisp?
        hey, Erlang is also a functional language
        translation was easy
        reworked to use pattern matching and guard idioms: nicer!

