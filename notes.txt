What's cool about Erlang
    Scalability, Performance
        nine 9s uptime
        1000s reqs/sec
        spawning, mananging processes, IPC baked in
        update code while running
    But what do I use it for
        how do I get started?
        don't want to build apps like that in a language you don't know
        I have trouble coming up with a project that needs all that
    Elegance
        concise & expressive
        part of what's cool about Erlang is what's cool about functional languages
        particularly neat features
        invert conventional view: what makes it strange makes it beautiful

Procedural, OO, Functional
        programming styles
        most languages are mutts
    Procedural
        Sequence of actions
        Simple data structures
        How people think about the world: narrative, fairly linear
        functions are like anecdotes
        C is procedural; Perl is procedural with OO bolted on
    OO - Things that do things, have behaviors
        Focus on data structures & relations
        How people understand parts of the world in isolation
        functions are still anecdotes
    OO - Define relations between objects
        Risk of Ravioli Code - narrative is lost
        Ruby is OO with functional features
    Functional
        Mapping inputs to outputs
        Not a normal human way to look at the world
        more like doing proofs
        Rewire your brain: cool, not as hard as it sounds, "math revelation payoff"
        De Morgan's laws
    Math vs. Play Doh
        procedural like rambing stories
        OO - structure for the sake of structure; complexity begets complexity
            easy to write lot of code - "Wait, what was the question?"
        functional - focus: inputs & outputs
    Why?
        ok, enough philosophizing

Reading Erlang in 2 min
    Where are my curly braces?
        "weird" = "doesn't look like C"
        unlike Java, Javascript, C#, Php, Perl, Python, Ruby
    comment
    atom - lowercase; :atom in Ruby, Enum in Java
    Variable - Java final
        assignment - this is not a... , it's a pattern match
    list, tuple - don't worry about it
    multi-assign
    list splitting (double tap)
    function - return atom
    f(x)
        to mathematicians, this is awesome

Function Overloading, and why these features are cool
    by parameter number
    by value
    with guards!
        again, you're mapping inputs to outputs
        let you differentiate inputs, takes input matching a step further
        makes functions more declarative
        "for input of this type, this is what I do"
        we'll get into the Why? of this later
    if - implicit elseif else
    case: not just switch - pattern match
        List is unbound
    case - file open
        this is why you don't see a lot of try/catch exception handling
    escript - hello world
    escript - option handling

Indent Parser
    Detour
        First looked at Erlang ~3 years ago: cool, but what do I do with it?
        GTD task list: store in markup, parse
    project tree
    action markup
        easy to read, review, edit; script extracts next actions
    input lines
    output structure
    Ruby
        data structures: Parser, Lines, Trees, Nodes, Leaves
    tree walk 1-5
    command-line
        output leaf nodes with paths
    Hackers & Painters
        essays by Paul Graham of y-combinator, hacker news
        transliterate Ruby to Lisp
        this is basically a recursive problem
    Train wreck
        lost track of where I was in tree and where I was in input - mismatches
        felt very square peg/round hole
        What's Lisp-y? Recursion! How?
        recursion - when a function calls itself
        break the problem into self-similar pieces
        what does that look like?
    Java iteration
        simpler example
    Erlang recursion 1
        how do I move to the next element in the list?
        like a proof: n -> n+1
    Erlang recursion 2
        how do I start? what do I do when I get to the end?
        recursion in OO/procedural is rare and tricky;
            in functional, it's common and easy
    Thinker
        back to the problem at hand - how do I do this thing recursively
        think think think
    Depair
        give up, go to bed; a-ha!
    recursive 1
        at first node, break the rest of the data into Your Children and Not-
        I have children, and I'm the first of my siblings
        do this at each node
    recursive 2 & 3
        what does the code look like? don't have time to teach you to read Lisp
    Erlang: A Kinder, Gentler Lisp?
        hey, Erlang is also a functional language
        escript!
        translation was easy
        reworked to use pattern matching and guard idioms: nicer!
    Erlang build_nodes
        input: list of lines
        create a node that knows its children,
            put it at the front of a list of its siblings
    Erlang split_list
        like the earlier recursion, except
            we're not changing the elements,
            but we are stopping at some point

Bowling
    Scoring
        Spares & Strikes
        OO awkwardness:
            Rolls sorta belong to frames, but may be counted for more than one
        Procedural: order matters
    Python
        Game, Frame - smart objects
        53 LOC; it'd be longer in Java because of curly braces alone
        tests: ~150 LOC
        felt pretty happy with it
    Erlang
        11 lines
        frame takes frame number, current score, remaining rolls
        consumes rolls, boosts score, recurses
        17 lines after handling invalid input, incomplete games
    Test code
        unit test framework? why bother?
        erlang functional test is simpler than the python unit tests

Mirror
    Python now: "It's clearly very busy, but what is it doing?!"
    ambiguous responsibility - who does what? who checks for bad data? everyone!
    model possible interactions, not actual
    easy to write a lot of "what if" code; let alone Java
    mind-altering, without that William Hurt turning into a monkey thing
Erlang is elegant & natural
    it's a little weird at first, but embrace the weirdness,
        it starts to feel natural in a surprisingly short time
    patterns & idioms
    I've only written a couple hundred lines of Erlang
Erlang is fun
    little brain chemical reward signals
You can start small
Know that you're writing code that will scale
    parser: new process for children and siblings add 2 lines of code
        func call becomes spawn & receive, which are essentially one-line cmds
The End!
Me

